name: Update repodata

on:
  workflow_dispatch:
    inputs:
      fedoraRelease:
        description: 'Fedora release'
        required: true
        default: 40
        type: int

  workflow_run:
    workflows: [Release RPM]
    types: [completed]

permissions:
  contents: write

jobs:
  repodata:
    name: Update repodata
    runs-on: ubuntu-latest
    container: registry.fedoraproject.org/fedora-toolbox:${{ inputs.fedoraRelease || 'latest' }}
    concurrency:
      group: repodata
      cancel-in-progress: true

    steps:
      - name: Install dependencies
        run: dnf install -y -q createrepo gh jq
      - name: Fetch releases
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          releases="$(gh api "repos/${{ github.repository }}/releases" --paginate | jq -r ".[].id")"
          for release in $releases
          do
            tag="$(gh api "repos/${{ github.repository }}/releases/$release" | jq -r ".tag_name")"
            if [[ "$tag" = "repodata" ]]; then continue; fi
            echo "Tag: $tag"
            mkdir -p "$tag"
            gh release download "$tag" -R "${{ github.repository }}" -D "$tag" -p '*.rpm' || true
          done
      - name: Create repo
        run: createrepo .
      - name: Sign repomd
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import
          gpg --detach-sign --armor repodata/repomd.xml
          gpg --export --armor > repodata/zfs-repo.gpg
      - name: Repo file
        run: |
          echo "[zfs-kmod]" > repodata/zfs-kmod.repo
          echo "name=ZFS kmod" >> repodata/zfs-kmod.repo
          echo 'baseurl=${{ github.server_url }}/${{ github.repository }}/releases/download/' >> repodata/zfs-kmod.repo
          echo "enabled=1" >> repodata/zfs-kmod.repo
          echo "gpgcheck=1" >> repodata/zfs-kmod.repo
          echo "gpgkey=${{ github.server_url }}/${{ github.repository }}/releases/download/repodata/zfs-repo.gpg" >> repodata/zfs-kmod.repo
      - name: Remove old files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          release="$(gh api "repos/${{ github.repository }}/releases/tags/repodata" | jq -r ".id")"
          echo "Release id: $release"
          assets="$(gh api "repos/${{ github.repository }}/releases/$release/assets" --paginate | jq -r ".[].id")"
          for asset in $assets
          do
            name="$(gh api "repos/${{ github.repository }}/releases/assets/$asset" | jq -r ".name")"
            echo "Deleting asset $name"
            gh api "repos/${{ github.repository }}/releases/assets/$asset" -X DELETE
          done
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Repodata"
          tag_name: "repodata"
          files: repodata/*
          make_latest: "true"
